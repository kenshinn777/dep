import asyncio
import random
import json
from telethon import TelegramClient

# =================== Daftar Akun ===================
accounts = [
    {
        'api_id': 28940749,
        'api_hash': '3447c6efbeee3d35d0e8e889a0783e20',
        'phone': '+6285183675647',
        'is_active': True
    },
    {
        'api_id': 23890260,
        'api_hash': '07e1d8073089e748a08937bc2f829bcd',
        'phone': '+62859218601609',
        'is_active': True
    },
    {
        'api_id': 24076294,
        'api_hash': '4b168e6b4a273415140354c3ee9ac08a',
        'phone': '+6282319880254',
        'is_active': True
    },
    {
      'api_id': 22063729,
        'api_hash': '517795674c57ac08bc2d7cd5f76e22e8',
        'phone': '+6281412471051',
        'is_active': True  
    },
    {
        'api_id': 22725317,
        'api_hash': '0b4864c4e6a4c6d8b48a26a2b23a706b',
        'phone': '+6288213292133',
        'is_active': True  
    }
    
]

# =================== Link Pesan Sumber ===================
link = 'https://t.me/dbgacor777/4'
fallback_link = 'https://t.me/dbgacor777/14'

# =================== Fungsi Load Grup dari JSON ===================
def load_groups_from_file():
    try:
        with open("groups.json", "r") as f:
            return json.load(f)
    except Exception as e:
        print(f"‚ùå Gagal membaca groups.json: {e}")
        return {}

# =================== Fungsi Ambil Pesan dari Link ===================
async def get_message_from_link(client, link):
    try:
        parts = link.strip().split('/')
        username = parts[-2]
        message_id = int(parts[-1])
        entity = await client.get_entity(username)
        msg = await client.get_messages(entity, ids=message_id)
        return msg
    except Exception as e:
        print(f"‚ùå Gagal ambil pesan dari link {link}: {e}")
        return None

# =================== Fungsi Forward Pesan ===================
async def forward_from_link_for_account(account, link):
    if not account['is_active']:
        print(f"‚ùå Akun {account['phone']} nonaktif. Skip.\n")
        return

    client = TelegramClient('session_' + account['phone'], account['api_id'], account['api_hash'])
    await client.start(account['phone'])
    await asyncio.sleep(random.randint(5, 15))  # Delay awal

    try:
        msg = await get_message_from_link(client, link)
        if not msg:
            print(f"‚ùå ({account['phone']}) Pesan tidak ditemukan.")
            return

        print(f"\nüì© ({account['phone']}) Isi Pesan: {(msg.text or '[media only]')[:100]}...\n")

        while True:
            group_data = load_groups_from_file()
            group_links = group_data.get(account['phone'], [])

            dest_entities = []
            for group_link in group_links:
                try:
                    group_username = group_link.split('/')[-1]
                    entity = await client.get_entity(group_username)
                    dest_entities.append((group_link, entity))
                except Exception as e:
                    print(f"‚ùå Gagal ambil entitas {group_link}: {e}")

            for group_link, group_entity in dest_entities:
                try:
                    await client.forward_messages(group_entity, msg)
                    print(f"‚úÖ ({account['phone']}) Forward ke {group_link}")
                except Exception as e:
                    if 'FloodWait' in e.__class__.__name__:
                        wait_time = getattr(e, 'seconds', 60)
                        print(f"‚è≥ FloodWait: Tunggu {wait_time} detik...")
                        await asyncio.sleep(wait_time)
                    elif 'CHAT_SEND_PHOTOS_FORBIDDEN' in str(e):
                        print(f"‚ö†Ô∏è ({account['phone']}) Gagal kirim karena media, ambil pesan fallback...")
                        fallback_msg = await get_message_from_link(client, fallback_link)
                        if fallback_msg:
                            try:
                                await client.forward_messages(group_entity, fallback_msg)
                                print(f"üîÅ ({account['phone']}) Forward ulang fallback ke {group_link}")
                            except Exception as ef:
                                print(f"‚ùå Gagal kirim fallback ke {group_link}: {ef}")
                        else:
                            print(f"‚ùå Gagal ambil fallback message.")
                    elif 'A wait of' in str(e):
                        print(f"‚ö†Ô∏è ({account['phone']}) Menunggu, mencari grup alternatif untuk forward...")
                        alternate_group = random.choice(group_links)
                        print(f"üîÑ Coba forward ke grup alternatif: {alternate_group}")
                        try:
                            group_username = alternate_group.split('/')[-1]
                            group_entity = await client.get_entity(group_username)
                            await client.forward_messages(group_entity, msg)
                            print(f"‚úÖ ({account['phone']}) Forward ke grup alternatif {alternate_group}")
                        except Exception as alt_error:
                            print(f"‚ùå Gagal forward ke grup alternatif {alternate_group}: {alt_error}")
                    else:
                        print(f"‚ö†Ô∏è Gagal forward ke {group_link}: {e}")

            delay = random.randint(120, 180)
            print(f"üïí Delay {delay} detik sebelum ulangi forward untuk {account['phone']}\n")
            await asyncio.sleep(delay)

    except Exception as e:
        print(f"‚ùå ERROR umum akun {account['phone']}: {e}")

# =================== Fungsi Main ===================
async def main():
    print("=== üîÅ Multi-Akun Telegram Forwarder ===\n")

    tasks = []
    for acc in accounts:
        if acc['is_active']:
            tasks.append(asyncio.create_task(forward_from_link_for_account(acc, link)))

    await asyncio.gather(*tasks)

# =================== Eksekusi ===================
if __name__ == '__main__':
    asyncio.run(main())
